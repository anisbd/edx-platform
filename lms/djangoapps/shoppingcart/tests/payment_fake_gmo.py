
"""
Fake payment page for use in acceptance tests.
This view is enabled in the URLs by the feature flag `ENABLE_PAYMENT_FAKE`.
"""
import logging

from django.views.generic.base import View
from django.views.decorators.csrf import csrf_exempt
from django.utils import timezone

from edxmako.shortcuts import render_to_response

from ..processors.helpers import get_processor_config
from ..processors.GMO import processor_hash

log = logging.getLogger(__name__)


class PaymentFakeView(View):
    """
    Fake payment page for use in acceptance tests.
    """

    @csrf_exempt
    def dispatch(self, *args, **kwargs):
        """
        Disable CSRF for these methods.
        """
        return super(PaymentFakeView, self).dispatch(*args, **kwargs)

    def post(self, request):
        if self._is_signature_valid(request.POST):
            return self._payment_page_response(request.POST)

        else:
            return render_to_response('shoppingcart/test/fake_payment_error.html')

    def _is_signature_valid(self, post_params):
        return post_params['p007'] == processor_hash(''.join([
            post_params['p001'], post_params['p002'], str(post_params['p003']),
            str(post_params['p004']), get_processor_config().get('SHOP_PASSWORD'), post_params['p006'],
        ]))

    def _response_post_params(self, post_params):
        # is is a dummy data that is generated by GMO
        params = {
            'p001': get_processor_config().get('ACCESS_KEY'),
            'p003': post_params['p003'],
            'p004': post_params['p004'],
            'p005': post_params['p005'],
            'p006': '61111111111',
            'p008': post_params['p002'],
            'p009': '91111111111',
            'p010': '1',
            'p011': '0',
            'p012': '121111111111',
            'p013': '131111111111',
            'p014': timezone.now().strftime('%Y%m%d%H%M%S'),
            'p016': '',
            'p017': '',
            'p018': post_params['p010'],
            'p019': post_params['p011'],
            'p020': post_params['p012'],
            'p048': '****1111',
        }
        params['signature_card'] = processor_hash(''.join([
            params['p008'], params['p009'], params['p010'], params['p011'],
            params['p012'], params['p013'], params['p014'], get_processor_config().get('SHOP_PASSWORD'),
        ]))
        params['signature_docomo'] = processor_hash(''.join([
            params['p008'], params['p006'], params['p014'], get_processor_config().get('SHOP_PASSWORD'),
        ]))
        return params

    def _payment_page_response(self, post_params):
        callback_url = post_params.get('p008', '/shoppingcart/postpay_callback/')
        post_params_success = self._response_post_params(post_params)
        context = {
            'callback_url': callback_url,
            'post_params_success': post_params_success,
        }
        return render_to_response('shoppingcart/test/fake_payment_page_gmo.html', context)
